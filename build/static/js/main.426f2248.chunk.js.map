{"version":3,"sources":["Test.js","JoblyApi.js","CompanyCard.js","CompaniesList.js","Search.js","Companies.js","JobCard.js","Job.js","JobsList.js","Jobs.js","UserContext.js","CompanyDetails.js","Register.js","Login.js","Home.js","Alert.js","Profile.js","PrivateRoute.js","Routes.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Test","BASE_URL","process","REACT_APP_BASE_URL","JoblyApi","endpoint","paramsOrData","verb","_token","localStorage","getItem","console","debug","axios","method","url","data","error","response","message","Array","isArray","search","this","request","res","companies","handle","company","log","jobs","token","username","user","id","CompanyCard","name","description","logo","className","src","CompaniesList","length","map","to","logo_url","Search","handleSearch","useState","formData","setFormData","onSubmit","e","preventDefault","type","value","placeholder","onChange","target","Companies","setCompanies","useEffect","a","getCompanies","companyResults","matchingCompanies","JobCard","item","handleApply","title","salary","equity","onClick","disabled","state","Job","idx","apply","JobsList","job","key","Jobs","setJobs","infoLoaded","setInfoLoaded","jobId","applyToJob","j","getJobs","jobResults","matchingJobs","UserContext","React","createContext","CompanyDetails","useParams","currentUser","useContext","setCompany","c","newCompany","getCompany","jobsAppliedTo","Set","has","getCompanyDetails","Register","history","useHistory","setToken","password","first_name","last_name","email","photo_url","handleChange","handleSubmit","registerUser","setItem","push","Login","loginUser","Home","Alert","messages","role","defaultProps","Profile","setCurrentUser","errors","userForm","setUserForm","messageShownRef","useRef","saveConfirmed","current","setTimeout","f","undefined","updateUser","updatedUser","PrivateRoute","exact","path","children","Routes","NavBar","handleLogOut","App","getCurrentUser","decode","Provider","removeItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.426f2248.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Test = () => {\n\n    return (\n        <>\n       <h1>I'm a test</h1>\n        </>\n    )\n}\n\nexport default Test;","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\nclass JoblyApi {\n    static async request(endpoint, paramsOrData = {}, verb = \"get\") {\n      paramsOrData._token = localStorage.getItem(\"jobly-token\");\n  \n      console.debug(\"API Call:\", endpoint, paramsOrData, verb);\n  \n      try {\n        return (await axios({\n          method: verb,\n          url: `${BASE_URL}/${endpoint}`,\n          [verb === \"get\" ? \"params\" : \"data\"]: paramsOrData})).data;\n          // axios sends query string data via the \"params\" key,\n          // and request body data via the \"data\" key,\n          // so the key we need depends on the HTTP verb\n      }\n  \n      catch(err) {\n        console.error(\"API Error:\", err.response);\n        let message = err.response.data.message;\n        throw Array.isArray(message) ? message : [message];\n      }\n    }\n  \n    static async getCompanies(search) {\n      let res = await this.request(\"companies\", { search });\n      return res.companies;\n    }\n\n    static async getCompany(handle) {\n      let res = await this.request(`companies/${handle}`);\n      return res.company;\n    }\n\n    static async getJobs(search) {\n      let res = await this.request(\"jobs\", { search });\n      console.log(\"geJob: \", res);\n    return res.jobs;\n    }\n\n    static async registerUser(data) {\n      let res = await this.request(\"users\", data, \"post\");\n      console.log(\"REGISTER USER RESPONSE\", res);\n    return res.token;\n    }\n\n    static async loginUser(data) {\n      let res = await this.request(\"login\", data, \"post\");\n      console.log(\"LOGIN USER RESPONSE\", res);\n    return res.token;\n    }\n\n    static async getCurrentUser(username) {\n      let res = await this.request(`users/${username}`);\n      console.log(\"GOT CURRENT USER RESPONSE\", res);\n    return res.user;\n    }\n\n    static async updateUser(username, data) {\n      let res = await this.request(`users/${username}`, data, \"patch\");\n      console.log(\"updateUser RESPONSE\", res);\n    return res.user;\n    }\n\n    static async applyToJob(id) {\n      let res = await this.request(`jobs/${id}/apply`, {}, \"post\");\n      console.log(\"made a call to applyToJob\", res);\n    return res.message;\n    }\n\n    \n  }\n\n  export default JoblyApi;","import React from \"react\";\nimport './App.css';\n\nconst CompanyCard = ({name, description, logo}) => {\n\n    return (\n        <div className=\"CompanyCard has-text-primary\">\n        <h3>{name}</h3>\n        <p>{description}</p>\n        <img src={logo}/>\n        </div>\n    ) \n}\n\nexport default CompanyCard;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport CompanyCard from \"./CompanyCard\";\n\nconst CompaniesList = ({companies=[]}) => {\n    const baseURL = \"companies/\"\n    return companies.length ? (\n        <div>\n            {companies.map(company => (\n                <Link className=\"Card\" to={baseURL + company.handle} >\n                <CompanyCard name={company.name} description={company.description} logo={company.logo_url}/>\n            </Link>\n            ))}\n        </div>\n    ) : (\n        <p>No results were found.</p>\n    )\n}\n\nexport default CompaniesList;","import React, { useState } from \"react\";\n\nconst Search = ({handleSearch}) => {\n    const [formData, setFormData] = useState(\"\");\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        handleSearch(formData);\n    };\n    const handleChange = (e) => {\n        setFormData(e.target.value);\n    };\n    return  (\n        <div>\n        <form onSubmit={handleSubmit}>\n           <input \n                name=\"search\"\n                type=\"text\"\n                value={formData}\n                placeholder=\"Enter a company to search for\"\n                onChange={handleChange}\n           />\n\n           <button>Submit</button>\n          </form> \n        </div>\n    )\n}\n\nexport default Search;","import React, { useState, useEffect} from \"react\";\nimport JoblyApi from \"./JoblyApi\";\nimport CompaniesList from \"./CompaniesList\";\nimport Search from \"./Search\";\n\nconst Companies = () => {\n    const [companies, setCompanies] = useState([]);\n\n    useEffect(() => {\n        async function getCompanies() {\n            const companyResults = await JoblyApi.getCompanies();\n            setCompanies(companyResults);\n        }\n        getCompanies();\n    }, []);\n\n    const handleSearch = async (search) => {\n        const matchingCompanies = await JoblyApi.getCompanies(search);\n        console.log(\"MATCHING COMPANIES\", matchingCompanies);\n        setCompanies(matchingCompanies);\n\n    }\n\n    return (\n        <>\n            <Search handleSearch={handleSearch} />\n            <CompaniesList companies={companies} />\n        </>\n    )\n}\n\nexport default Companies;","import React from \"react\";\nimport \"./App.css\"\n\nfunction JobCard({ item = {}, handleApply }) {\n\n  return (\n    <div className=\"JobCard\">\n\n        <h3>\n          <span>{item.title}</span>\n        </h3>\n        <div>Salary: {item.salary}</div>\n        <div>Equity: {item.equity}</div>\n        <button\n          onClick={handleApply}\n          disabled={item.state}\n        >\n          {item.state ? \"Applied\" : \"Apply\"}\n        </button>\n\n    </div>\n  );\n}\n\nexport default JobCard;\n","import React from \"react\";\nimport JobCard from \"./JobCard\";\n\nconst Job = ({idx, apply = () => null, item}) => {\n\n\n    return (\n        <JobCard item={item} handleApply={() => apply(idx)} />\n    )\n}\n\nexport default Job;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Job from \"./Job\";\n\nconst JobsList = ({jobs=[], apply = () => null }) => {\n    return jobs.length ? (\n        <div>\n            {jobs.map((job, idx) => (\n               <Job key={idx} idx={idx} apply={apply} title={job.title} item={job}/>\n            ))}\n        </div>\n    ) : (\n        <p>No results were found.</p>\n    )\n}\n\nexport default JobsList;","import React, { useState, useEffect} from \"react\";\nimport JoblyApi from \"./JoblyApi\";\nimport JobsList from \"./JobsList\";\nimport Search from \"./Search\";\n\nconst Jobs = () => {\n    const [jobs, setJobs] = useState([]);\n      const [infoLoaded, setInfoLoaded] = useState(false);\n\n\n    useEffect(() => {\n        async function getJobs() {\n            try{\n                const jobResults = await JoblyApi.getJobs();\n                setJobs(jobResults);\n            } catch(e) {\n                console.log(e);\n            }\n            setInfoLoaded(true);\n        }\n        setInfoLoaded(false);\n        getJobs();\n    }, []);\n\n    async function apply(idx) {\n        let jobId = jobs[idx].id;\n        let message = await JoblyApi.applyToJob(jobId);\n        setJobs(j => j.map(job => \n            job.id === jobId ? { ...job, state: message} : job\n        ));\n    }\n\n    const handleSearch = async (search) => {\n        const matchingJobs = await JoblyApi.getJobs(search);\n        console.log(\"MATCHING JOBS\", matchingJobs);\n        setJobs(matchingJobs);\n    }\n\n    if (!infoLoaded) {\n    return (\n      <p>Content is loading!</p>\n    )\n  }\n\n    return (\n        <>\n            <Search handleSearch={handleSearch} />\n            <JobsList jobs={jobs} apply={apply}/>\n        </>\n    )\n}\n\nexport default Jobs;","import React from \"react\";\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport JoblyApi from \"./JoblyApi\";\nimport Job from \"./Job\";\nimport UserContext from \"./UserContext\";\n\nconst CompanyDetails = () => {\n    const {handle} = useParams();\n    const { currentUser } = useContext(UserContext);\n    const [company, setCompany] = useState([]);\n\n    useEffect(() => {\n        const getCompanyDetails = async () => {\n            const { jobs } = currentUser;\n            const c = await JoblyApi.getCompany(handle);\n            const jobsAppliedTo = new Set(jobs.map(job => job.id));\n            console.log(\"COMPANY DETAILS\", c);\n            // add key for each job in company if it is applied to ---\n            // this let us handle the \"apply/applied\" button\n            c.jobs = c.jobs.map(job => ({\n                ...job,\n                state: jobsAppliedTo.has(job.id) ? \"Applied\" : null\n            }))\n            setCompany(c);\n        }\n        getCompanyDetails();\n    }, [handle, currentUser]);\n\n async function apply(idx) {\n    if (company && Array.isArray(company.jobs) && idx < company.jobs.length) {\n      let jobId = company.jobs[idx].id;\n      let message = await JoblyApi.applyToJob(jobId);\n      setCompany(c => {\n        let newCompany = { ...c };\n        newCompany.jobs = newCompany.jobs.map(job =>\n          job.id === jobId ? { ...job, state: message } : job\n        );\n        return newCompany;\n      });\n    }\n  }\n\n    return company.jobs ? (\n        <div>\n            {company.jobs.map((job, idx)=> (\n                <Job key={idx} idx={idx} apply={apply} item={job}/>\n            ))}\n        </div>\n    ) : (\n        <p>Loading</p>\n    )\n}\n\nexport default CompanyDetails;","import React, { useState, useContext } from \"react\";\nimport JoblyApi from \"./JoblyApi\";\nimport { useHistory } from \"react-router-dom\";\nimport UserContext from \"./UserContext\";\n\n\nconst Register = () => {\n    const history = useHistory();\n    const {setToken} = useContext(UserContext);\n\n    const INITIAL_VALUE = {\n        username:\"\",\n        password:\"\",\n        first_name:\"\",\n        last_name:\"\",\n        email:\"\",\n        photo_url:\"\"\n    }\n\n    const [formData, setFormData] = useState(INITIAL_VALUE);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(data => ({\n            ...data,\n            [name]:value\n        }))\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const data = formData;\n        let token;\n        try {\n            token = await JoblyApi.registerUser(data);\n        } catch(e) {\n            console.log(e);\n        }\n        if (token) {\n            localStorage.setItem(\"jobly-token\", token);\n            setToken(token);\n            history.push(\"/jobs\");\n        }\n    }\n\n\n    return (\n       <form onSubmit={handleSubmit}>\n       <label>Username: </label>\n           <input \n               type=\"text\"\n               name=\"username\"\n               value={formData.username}\n               placeholder=\"password\"\n               onChange={handleChange}\n           />\n        <label>Password: </label>\n           <input \n               type=\"text\"\n               name=\"password\"\n               value={formData.password}\n               placeholder=\"password\"\n               onChange={handleChange}\n           />\n        <label>First Name: </label>\n           <input \n               type=\"text\"\n               name=\"first_name\"\n               value={formData.first_name}\n               placeholder=\"first_name\"\n               onChange={handleChange}\n           />\n        <label>Last Name: </label>\n           <input \n               type=\"text\"\n               name=\"last_name\"\n               value={formData.last_name}\n               placeholder=\"last_name\"\n               onChange={handleChange}\n           />\n        <label>Email: </label>\n           <input \n               type=\"text\"\n               name=\"email\"\n               value={formData.email}\n               placeholder=\"email\"\n               onChange={handleChange}\n           />\n        <label>Photo: </label>\n           <input \n               type=\"text\"\n               name=\"photo_url\"\n               value={formData.photo_url}\n               placeholder=\"photo_url\"\n               onChange={handleChange}\n           />\n           <button>Register</button>\n       </form>\n    )\n}\n\nexport default Register;","import React, { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport JoblyApi from \"./JoblyApi\";\nimport UserContext from \"./UserContext\";\n\n\nconst Login = () => {\n    const { setToken  } =useContext(UserContext);\n    const history = useHistory();\n    const INITIAL_VALUE = {\n        username:\"\",\n        password:\"\"\n    }\n    const [formData, setFormData] = useState(INITIAL_VALUE);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(data => ({\n            ...data,\n            [name]:value\n        }))\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const data = formData;\n        let token;\n        try {\n            token = await JoblyApi.loginUser(data);\n        } catch(e) {\n            console.log(e);\n        }\n            localStorage.setItem(\"jobly-token\", token);\n            setToken(token);\n            history.push(\"/jobs\");\n\n\n    }\n\n\n    return (\n       <form onSubmit={handleSubmit}>\n       <label>Username: </label>\n           <input \n               type=\"text\"\n               name=\"username\"\n               value={formData.username}\n               placeholder=\"password\"\n               onChange={handleChange}\n           />\n        <label>Password: </label>\n           <input \n               type=\"text\"\n               name=\"password\"\n               value={formData.password}\n               placeholder=\"password\"\n               onChange={handleChange}\n           />\n        \n           <button>Login</button>\n       </form>\n    )\n}\n\nexport default Login;\n","import React, { useContext } from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Job from \"./Job\";\nimport UserContext from \"./UserContext\";\n\nconst Home = () => {\n    const { currentUser } = useContext(UserContext);\n    return currentUser ? (\n       <div>\n            <h1>Jobly</h1>\n            <p>All the jobs in one, convenient place.</p>\n            <h3>Welcome Back!</h3>\n        </div>\n    ) : (\n        <div>\n            <h1>Jobly</h1>\n            <p>All the jobs in one, convenient place.</p>\n            <Link to=\"/login\"><button>LogIn</button></Link>\n        </div>\n    )\n}\n\nexport default Home;","import React from \"react\";\n\nfunction Alert({ type, messages }) {\n  return (\n    <div className={`alert alert-${type}`} role=\"alert\">\n      {messages.map(error => (\n        <p className=\"mb-0 small\" key={error}>\n          {error}\n        </p>\n      ))}\n    </div>\n  );\n}\n\nAlert.defaultProps = {\n  type: \"danger\",\n  messages: []\n};\n\nexport default Alert;\n","\nimport React, { useState, useContext, useRef, useEffect } from \"react\";\nimport JoblyApi from \"./JoblyApi\";\nimport {useHistory} from \"react-router-dom\";\nimport UserContext from \"./UserContext\";\nimport Alert from \"./Alert\";\n\nconst MESSAGE_SHOW_PERIOD_IN_MSEC = 3000;\n\nconst Profile = () => {\n    const { currentUser, setCurrentUser } = useContext(UserContext);\n    console.log(\"Username\", currentUser);\n    const history = useHistory();\n    const {setToken} = useContext(UserContext);\n    const [userForm, setUserForm] = useState({\n        first_name: currentUser.first_name || \"\",\n        last_name: currentUser.last_name || \"\",\n        email: currentUser.email || \"\",\n        photo_url: currentUser.photo_url || \"\",\n        password: \"\",\n        errors: []\n    });\n    const messageShownRef = useRef(false);\n    useEffect(\n        function() {\n        if (userForm.saveConfirmed && !messageShownRef.current) {\n            messageShownRef.current = true;\n            setTimeout(function() {\n            setUserForm(f => ({ ...f, saveConfirmed: false }));\n            messageShownRef.current = false;\n            }, MESSAGE_SHOW_PERIOD_IN_MSEC);\n        }\n        },\n        [userForm]\n    );\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setUserForm(f => ({\n      ...f,\n      [name]: value,\n      errors: []\n    }));\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const data = {\n        first_name: userForm.first_name || undefined,\n        last_name: userForm.last_name || undefined,\n        email: userForm.email || undefined,\n        photo_url: userForm.photo_url || undefined,\n        password: userForm.password\n      };\n        try {\n            console.log(\"entering try/catch\");\n           const updatedUser = await JoblyApi.updateUser(currentUser.username, data);\n            setUserForm(f => ({\n        ...f,\n        errors: [],\n        saveConfirmed: true,\n        password: \"\"\n      }));\n         setCurrentUser(updatedUser)\n        } catch(errors) {\n            console.log(e);\n            setUserForm(f => ({ ...f, errors }));\n        }\n    }\n    return  (\n       <form onSubmit={handleSubmit}>\n       <label>Username: </label>\n           <p>{currentUser.username}</p>\n        <label>First Name: </label>\n           <input \n               type=\"text\"\n               name=\"first_name\"\n               value={userForm.first_name}\n               placeholder=\"first_name\"\n               onChange={handleChange}\n           />\n        <div className=\"input-group\">  \n        <label>Last Name: </label>\n           <input \n               type=\"text\"\n               name=\"last_name\"\n               value={userForm.last_name}\n               placeholder=\"last_name\"\n               onChange={handleChange}\n           />\n           </div> \n        <label>Email: </label>\n           <input \n               type=\"text\"\n               name=\"email\"\n               value={userForm.email}\n               placeholder=\"email\"\n               onChange={handleChange}\n           />\n        <label>Photo URL: </label>\n           <input \n               type=\"text\"\n               name=\"photo_url\"\n               value={userForm.photo_url}\n               placeholder=\"photo_url\"\n               onChange={handleChange}\n           />\n        <label>Re-enter Password: </label>\n           <input \n               type=\"text\"\n               name=\"password\"\n               value={userForm.password}\n               placeholder=\"password\"\n               onChange={handleChange}\n           />\n\n           {userForm.errors.length ? (\n              <Alert type=\"danger\" messages={userForm.errors} />\n            ) : null}\n\n            {userForm.saveConfirmed ? (\n              <Alert type=\"success\" messages={[\"User updated successfully.\"]} />\n            ) : null}\n\n           <button>Submit</button>\n       </form>\n    )\n}\n\nexport default Profile;\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport UserContext from \"./UserContext\";\n\nfunction PrivateRoute({ exact, path, children }) {\n  const { currentUser } = useContext(UserContext);\n\n  if (!currentUser) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <Route exact={exact} path={path}>\n      {children}\n    </Route>\n  );\n}\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport Test from \"./Test\";\nimport Companies from \"./Companies\";\nimport Jobs from \"./Jobs\";\nimport CompanyDetails from \"./CompanyDetails\";\nimport Register from \"./Register\";\nimport Login from \"./Login\";\nimport Home from \"./Home\";\nimport Profile from \"./Profile\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nconst Routes = () => {\n\n\n    return (\n        <>\n        <Switch>\n            <Route exact path=\"/\"><Home/></Route>\n            <PrivateRoute exact path=\"/companies\"><Companies/></PrivateRoute>\n            <PrivateRoute exact path=\"/companies/:handle\"><CompanyDetails/></PrivateRoute>\n            <PrivateRoute exact path=\"/jobs\"><Jobs/></PrivateRoute>\n            <PrivateRoute exact path=\"/jobs/:\"><Test/></PrivateRoute>\n            <Route exact path=\"/profile\"><Profile/></Route>\n            <Route exact path=\"/login\"><Login/></Route>\n            <Route exact path=\"/register\"><Register/></Route>\n            <Route><p>Hmmm. I can't seem to find what you want.</p></Route>\n        </Switch>\n        </>\n    )\n}\n\nexport default Routes;","import React, { useContext } from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport UserContext from \"./UserContext\";\n\nconst NavBar = ({handleLogOut}) => {\n    const { currentUser } = useContext(UserContext);\n    console.log(\"NavBar says currentUser is: \", currentUser);\n\n    const loggedInNav = () => {\n        return (\n            <>\n                <NavLink exact to=\"/companies\">Companies</NavLink>\n                <NavLink exact to=\"/jobs\">Jobs</NavLink>\n                <NavLink exact to=\"/profile\">Profile</NavLink>\n                <NavLink exact to=\"/\" onClick={handleLogOut}>Logout</NavLink>\n            </>\n        )\n    }\n\n    const publicNav = () => {\n        return (\n            <>\n                <NavLink exact to=\"/login\" className=\"NavLink\">Login</NavLink>\n                <NavLink exact to=\"/register\">Register</NavLink>\n            </>\n        )\n    }\n    return (\n        <div className=\"NavBar\">\n            <NavLink exact to=\"/\">Jobly</NavLink>\n            { currentUser ? loggedInNav() : publicNav() }\n        </div>\n    )\n}\n\nexport default NavBar;","import React, { useState, useEffect } from 'react';\nimport Routes from \"./Routes\";\nimport { decode } from \"jsonwebtoken\";\nimport './App.css';\nimport NavBar from \"./NavBar\";\nimport JoblyApi from './JoblyApi';\nimport UserContext from \"./UserContext\";\n\nfunction App() {\n  const [token, setToken] = useState(localStorage.getItem(\"jobly-token\"));\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [currentUser ,setCurrentUser] = useState(null);\n    \n  useEffect(() => {\n    const getCurrentUser = async () => {\n      try {\n        const { username } = decode(token);\n        let currentUser = await JoblyApi.getCurrentUser(username);\n        setCurrentUser(currentUser);\n      } catch(e) {\n        setCurrentUser(null);\n      }\n      setInfoLoaded(true);\n    };\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  const handleLogOut = () => {\n    setCurrentUser(null);\n    setToken(null);\n    localStorage.removeItem(\"jobly-token\");\n  };\n\n  if (!infoLoaded) {\n    return (\n      <p>Content is loading!</p>\n    )\n  }\n\n  return (\n    <UserContext.Provider value={{currentUser, setCurrentUser, setToken}}>\n    <div className=\"App\">\n      <NavBar handleLogOut={handleLogOut}/>\n      <Routes/>\n    </div>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n  <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}